#!/bin/bash

# USAGE
#   bootstrap new_host
# ENVIRONMENT VARIABLES
#   IP: The IP address of the Pi. Needed if local network doesn't support mDNS
# EXAMPLES
#   bootstrap org
#   IP=192.168.1.100 bootstrap org

set -e

USER=pi
INITIAL_HOST=raspberrypi
INITIAL_HOSTNAME=$INITIAL_HOST.local
SSH_CONFIG_PATH=$HOME/.ssh/config
SSH_KEY_PATH=$HOME/.ssh/organize_server
SSH_KNOWN_HOSTS=$HOME/.ssh/known_hosts

if [ "$#" -ne 1 ]; then
  >&2 echo "Error: Must include new hostname as first arg"
  exit 1
fi

echo 'Checking that Docker daemon is running...'
if ! docker stats --no-stream >/dev/null 2>/dev/null; then
  >&2 echo "Error: Docker daemon must be running"
  exit 1
fi

new_host=$1
new_hostname=$new_host.local

if ! [ -z "$IP" ]; then
  echo "Using IP address $IP instead of mDNS"
  INITIAL_HOSTNAME=$IP
  new_hostname=$IP
fi

ssh_config="Host $new_host
    HostName $new_hostname
    User $USER
    IdentityFile $SSH_KEY_PATH
"
if grep -q "Host $new_host" $SSH_CONFIG_PATH; then
  echo "$new_host is already present in SSH config"
  line_count=$(awk "/Host $new_host$/,/HostName $new_hostname$/" $SSH_CONFIG_PATH | wc -l)
  if (( $line_count != 2 )); then
    echo "WARNING: The HostName for $new_host appears to have changed, so your"
    printf ' SSH config may need to be manually updated. Open\n'
    printf " $SSH_CONFIG_PATH and then, if needed, edit it so it contains\n"
    printf " the following config:\n\n"
    echo "$ssh_config"
    read -p 'Then press <enter> to continue'
  fi
else
  echo "Adding $new_host to SSH config..."
  echo "$ssh_config" | sudo tee -a $SSH_CONFIG_PATH >/dev/null
fi

echo "Removing $INITIAL_HOSTNAME and $new_hostname from known hosts..."
sudo sed -i '' "/$INITIAL_HOSTNAME/d" $SSH_KNOWN_HOSTS
sudo sed -i '' "/$new_hostname/d" $SSH_KNOWN_HOSTS

echo "Copying ssh config to $INITIAL_HOSTNAME..."
ssh-copy-id -i $SSH_KEY_PATH $USER@$INITIAL_HOSTNAME

ssh -i $SSH_KEY_PATH $USER@$INITIAL_HOSTNAME << EOF
  set -e

  echo 'Setting up passwordless SSH...'
  sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config

  echo 'Updating package manager...'
  sudo apt update && sudo apt upgrade -y

  # Updating the hostname should happen as close to reboot as possible because
  # otherwise random scripts will emit the following error:
  # "sudo: unable to resolve host raspberrypi: Name or service not known"
  echo "Updating hostname to $new_host..."
  sudo sed -i 's/$INITIAL_HOST/$new_host/' /etc/hostname
  sudo sed -i 's/$INITIAL_HOST/$new_host/' /etc/hosts
EOF

echo "Rebooting..."
set +e # This is needed because reboot over ssh has a non-zero exit code
ssh -i $SSH_KEY_PATH $USER@$INITIAL_HOSTNAME "sudo reboot"
set -e

echo "Waiting for $new_host to reboot..."
sleep 10 # This is needed to ensure a connection isn't attempted before reboot
until ping -c 1 $new_hostname >/dev/null
do
  true
done

ssh -i $SSH_KEY_PATH $new_host << EOF
  set -e

  echo 'Setting up firewall...'
  sudo apt install -y -q ufw
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw allow ssh
  sudo ufw allow "WWW Full"
  sudo ufw allow Bonjour
  sudo ufw allow ntp
  yes | sudo ufw enable

  echo 'Installing Docker...'
  GET_DOCKER_SCRIPT=get-docker.sh
  curl -fsSL https://get.docker.com -o \$GET_DOCKER_SCRIPT
  sh \$GET_DOCKER_SCRIPT
  rm -f \$GET_DOCKER_SCRIPT

  echo 'Allowing Docker to be run without sudo...'
  sudo usermod --append --groups docker \$USER
  newgrp docker
EOF

# Note this also happens in bin/dev-setup
echo 'Transferring Docker daemon.json file'
scp -i $SSH_KEY_PATH daemon.json $new_host:

ssh -i $SSH_KEY_PATH $new_host << EOF
  set -e

  echo 'Installing the loki-docker-driver pulgin'
  docker plugin install grafana/loki-docker-driver:3.3.2-arm64 --alias loki --grant-all-permissions

  echo 'Moving the daemon.json file into place'
  sudo mv daemon.json /etc/docker/daemon.json

  echo 'Restarting the Docker daemon'
  sudo systemctl restart docker
EOF

echo
echo 'Setup port forwarding on your router using the network info below.'
echo 'You may also need to setup an IPv6 proxy (e.g. on Cloudflare).'
echo 'Host network info:'
ssh -i $SSH_KEY_PATH $new_host "sudo ifconfig eth0"
read -p 'Press <enter> to continue'

echo 'Deploying images...'
parent_dir_path=$(dirname "$0")
$parent_dir_path/deploy $new_host

echo "Successfully bootstrapped $new_host"
