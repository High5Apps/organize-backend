# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.


class ActiveSupport::TestCase
  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Ballot]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Ballot) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Ballot]) }
  def ballots(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Candidate]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Candidate) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Candidate])
  end
  def candidates(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Comment]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Comment) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Comment]) }
  def comments(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Connection]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Connection) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Connection])
  end
  def connections(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Flag]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Flag) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Flag]) }
  def flags(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ModerationEvent]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ModerationEvent) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ModerationEvent])
  end
  def moderation_events(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Nomination]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Nomination) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Nomination])
  end
  def nominations(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Org]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Org) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Org]) }
  def orgs(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Permission]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Permission) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Permission])
  end
  def permissions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Post]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Post) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Post]) }
  def posts(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Term]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Term) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Term]) }
  def terms(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[UnionCard]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(UnionCard) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[UnionCard])
  end
  def union_cards(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Upvote]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Upvote) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Upvote]) }
  def upvotes(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[User]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(User) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[User]) }
  def users(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Vote]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Vote) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Vote]) }
  def votes(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[WorkGroup]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(WorkGroup) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[WorkGroup])
  end
  def work_groups(fixture_name = nil, *other_fixtures); end
end
