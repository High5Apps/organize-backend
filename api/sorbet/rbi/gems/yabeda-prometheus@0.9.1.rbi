# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yabeda-prometheus` gem.
# Please instead update this file by running `bin/tapioca gem yabeda-prometheus`.


# source://yabeda-prometheus//lib/yabeda/prometheus/version.rb#3
module Yabeda
  class << self
    # source://yabeda/0.13.1/lib/yabeda.rb#34
    def adapters; end

    # source://yabeda/0.13.1/lib/yabeda.rb#85
    def already_configured?; end

    # source://yabeda/0.13.1/lib/yabeda.rb#52
    def collect!; end

    # source://yabeda/0.13.1/lib/yabeda.rb#39
    def collectors; end

    # source://yabeda/0.13.1/lib/yabeda.rb#43
    def config; end

    # source://yabeda/0.13.1/lib/yabeda.rb#80
    def configurators; end

    # source://yabeda/0.13.1/lib/yabeda.rb#93
    def configure!; end

    # source://yabeda/0.13.1/lib/yabeda.rb#85
    def configured?; end

    # source://yabeda/0.13.1/lib/yabeda.rb#116
    def debug!; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def debug?(*args, **_arg1, &block); end

    # source://yabeda/0.13.1/lib/yabeda.rb#63
    def default_tags; end

    # source://yabeda/0.13.1/lib/yabeda.rb#27
    def groups; end

    # source://yabeda/0.13.1/lib/yabeda.rb#22
    def metrics; end

    # source://yabeda/0.13.1/lib/yabeda.rb#69
    def register_adapter(name, instance); end

    # source://yabeda/0.13.1/lib/yabeda.rb#139
    def reset!; end
  end
end

# source://yabeda-prometheus//lib/yabeda/prometheus/version.rb#4
module Yabeda::Prometheus
  class << self
    # source://yabeda-prometheus//lib/yabeda/prometheus.rb#17
    def push_gateway; end

    # source://yabeda-prometheus//lib/yabeda/prometheus.rb#13
    def registry; end
  end
end

# source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#9
class Yabeda::Prometheus::Adapter < ::Yabeda::BaseAdapter
  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#92
  def build_name(metric); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#102
  def debug!; end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#36
  def perform_counter_increment!(metric, tags, value); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#52
  def perform_gauge_set!(metric, tags, value); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#70
  def perform_histogram_measure!(metric, tags, value); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#86
  def perform_summary_observe!(metric, tags, value); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#26
  def register_counter!(metric); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#42
  def register_gauge!(metric); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#58
  def register_histogram!(metric); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#76
  def register_summary!(metric); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#22
  def registry; end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#96
  def validate_metric!(metric); end

  private

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#117
  def store_settings(metric); end
end

# source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#10
class Yabeda::Prometheus::Adapter::UndeclaredMetricTags < ::RuntimeError
  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#13
  def initialize(metric_name, caused_exception); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/adapter.rb#11
  def message; end
end

# Rack application or middleware that provides metrics exposition endpoint
#
# source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#9
class Yabeda::Prometheus::Exporter < ::Prometheus::Middleware::Exporter
  # @return [Exporter] a new instance of Exporter
  #
  # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#57
  def initialize(app, options = T.unsafe(nil)); end

  # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#61
  def call(env); end

  class << self
    # Allows to use middleware as standalone rack application
    #
    # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#16
    def call(env); end

    # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#34
    def rack_app(exporter = T.unsafe(nil), logger: T.unsafe(nil), use_deflater: T.unsafe(nil), **exporter_options); end

    # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#44
    def rack_handler; end

    # source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#22
    def start_metrics_server!(**rack_app_options); end
  end
end

# source://yabeda-prometheus//lib/yabeda/prometheus/exporter.rb#10
Yabeda::Prometheus::Exporter::NOT_FOUND_HANDLER = T.let(T.unsafe(nil), Proc)

# source://yabeda-prometheus//lib/yabeda/prometheus/version.rb#5
Yabeda::Prometheus::VERSION = T.let(T.unsafe(nil), String)
