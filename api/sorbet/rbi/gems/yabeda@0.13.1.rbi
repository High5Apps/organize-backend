# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yabeda` gem.
# Please instead update this file by running `bin/tapioca gem yabeda`.


# Extendable framework for collecting and exporting metrics from Ruby apps
#
# source://yabeda//lib/yabeda/version.rb#3
module Yabeda
  include ::Yabeda::DSL
  extend ::Yabeda::DSL::ClassMethods

  class << self
    # @return [Hash<Symbol, Yabeda::BaseAdapter>] All loaded adapters
    #
    # source://yabeda//lib/yabeda.rb#34
    def adapters; end

    # @return [Boolean] Whether +Yabeda.configure!+ has been already called
    #
    # source://yabeda//lib/yabeda.rb#85
    def already_configured?; end

    # Execute all collector blocks for periodical retrieval of metrics
    #
    # This method is intended to be used by monitoring systems adapters
    #
    # source://yabeda//lib/yabeda.rb#52
    def collect!; end

    # @return [Array<Proc>] All collectors for periodical retrieving of metrics
    #
    # source://yabeda//lib/yabeda.rb#39
    def collectors; end

    # source://yabeda//lib/yabeda.rb#43
    def config; end

    # @return [Array<Proc>] All configuration blocks for postponed setup
    #
    # source://yabeda//lib/yabeda.rb#80
    def configurators; end

    # Perform configuration: registration of metrics and collector blocks
    #
    # @raise [AlreadyConfiguredError]
    # @return [void]
    #
    # source://yabeda//lib/yabeda.rb#93
    def configure!; end

    # @return [Boolean] Whether +Yabeda.configure!+ has been already called
    #
    # source://yabeda//lib/yabeda.rb#85
    def configured?; end

    # Enable and setup service metrics to monitor yabeda performance
    #
    # source://yabeda//lib/yabeda.rb#116
    def debug!; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def debug?(*args, **_arg1, &block); end

    # @return [Hash<Symbol, Symbol>] All added global default tags
    #
    # source://yabeda//lib/yabeda.rb#63
    def default_tags; end

    # @return [Hash<String, Yabeda::Group>] All registered metrics
    #
    # source://yabeda//lib/yabeda.rb#27
    def groups; end

    # @return [Hash<String, Yabeda::Metric>] All registered metrics
    #
    # source://yabeda//lib/yabeda.rb#22
    def metrics; end

    # @param name [Symbol]
    # @param instance [BaseAdapter]
    #
    # source://yabeda//lib/yabeda.rb#69
    def register_adapter(name, instance); end

    # Forget all the configuration.
    # For testing purposes as it doesn't rollback changes in adapters.
    #
    # @api private
    #
    # source://yabeda//lib/yabeda.rb#139
    def reset!; end
  end
end

# Raises on repeated call to +Yabeda.configure!+
#
# source://yabeda//lib/yabeda/errors.rb#7
class Yabeda::AlreadyConfiguredError < ::StandardError
  # @return [AlreadyConfiguredError] a new instance of AlreadyConfiguredError
  #
  # source://yabeda//lib/yabeda/errors.rb#8
  def initialize(configuring_location); end

  # Returns the value of attribute message.
  #
  # source://yabeda//lib/yabeda/errors.rb#13
  def message; end
end

# Base class for adapters to particular monitoring systems
#
# source://yabeda//lib/yabeda/base_adapter.rb#5
class Yabeda::BaseAdapter
  # Hook to enable debug mode in adapters when it is enabled in Yabeda itself
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#49
  def debug!; end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#20
  def perform_counter_increment!(_counter, _tags, _increment); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#28
  def perform_gauge_set!(_metric, _tags, _value); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#36
  def perform_histogram_measure!(_metric, _tags, _value); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#44
  def perform_summary_observe!(_metric, _tags, _value); end

  # source://yabeda//lib/yabeda/base_adapter.rb#6
  def register!(metric); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#16
  def register_counter!(_metric); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#24
  def register_gauge!(_metric); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#32
  def register_histogram!(_metric); end

  # @raise [NotImplementedError]
  #
  # source://yabeda//lib/yabeda/base_adapter.rb#40
  def register_summary!(_metric); end
end

# Runtime configuration for the main yabeda gem
#
# source://yabeda//lib/yabeda/config.rb#7
class Yabeda::Config < ::Anyway::Config
  # Implement predicate method from AnywayConfig 2.x to support AnywayConfig 1.x users
  def debug?; end
end

# source://yabeda//lib/yabeda/errors.rb#4
class Yabeda::ConfigurationError < ::StandardError; end

# Growing-only counter
#
# source://yabeda//lib/yabeda/counter.rb#5
class Yabeda::Counter < ::Yabeda::Metric
  # @overload increment
  #
  # source://yabeda//lib/yabeda/counter.rb#10
  def increment(*args); end

  # source://yabeda//lib/yabeda/counter.rb#20
  def values; end

  class << self
    # @api private
    #
    # source://yabeda//lib/yabeda/counter.rb#26
    def parse_args(*args); end
  end
end

# DSL for ease of work with Yabeda
#
# source://yabeda//lib/yabeda/dsl/option_builder.rb#4
module Yabeda::DSL
  mixes_in_class_methods ::Yabeda::DSL::ClassMethods

  class << self
    # @private
    #
    # source://yabeda//lib/yabeda/dsl.rb#8
    def included(base); end
  end
end

# source://yabeda//lib/yabeda/dsl/class_methods.rb#15
module Yabeda::DSL::ClassMethods
  # Limit all group metrics to specific adapters only
  #
  # @param adapter_names [Array<Symbol>] Names of adapters to use
  # @raise [ConfigurationError]
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#98
  def adapter(*adapter_names, group: T.unsafe(nil)); end

  # Define the actions that should be performed
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#24
  def collect(&block); end

  # Block for grouping and simplifying configuration of related metrics
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#17
  def configure(&block); end

  # Register a growing-only counter
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#42
  def counter(*args, **kwargs, &block); end

  # Add default tag for all metric
  #
  # @param name [Symbol] Name of default tag
  # @param value [String] Value of default tag
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#69
  def default_tag(name, value, group: T.unsafe(nil)); end

  # Register a gauge
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#48
  def gauge(*args, **kwargs, &block); end

  # Specify metric category or group for all consecutive metrics in this
  # +configure+ block.
  # On most adapters it is only adds prefix to the metric name but on some
  # (like NewRelic) it is treated individually and has a special meaning.
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#32
  def group(group_name); end

  # Register a histogram
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#54
  def histogram(*args, **kwargs, &block); end

  # Register a summary
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#60
  def summary(*args, **kwargs, &block); end

  # Get tags set by +with_tags+
  #
  # @api private
  # @return Hash
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#91
  def temporary_tags; end

  # Redefine default tags for a limited amount of time
  #
  # @param tags Hash{Symbol=>#to_s}
  #
  # source://yabeda//lib/yabeda/dsl/class_methods.rb#80
  def with_tags(**tags); end

  private

  # source://yabeda//lib/yabeda/dsl/class_methods.rb#116
  def register_group_for(metric); end

  # source://yabeda//lib/yabeda/dsl/class_methods.rb#107
  def register_metric(metric); end
end

# Handles DSL for working with individual metrics
#
# source://yabeda//lib/yabeda/dsl/metric_builder.rb#8
class Yabeda::DSL::MetricBuilder
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # source://yabeda//lib/yabeda/dsl/metric_builder.rb#13
  def build(args, kwargs, group, &block); end

  private

  # source://yabeda//lib/yabeda/dsl/metric_builder.rb#20
  def initialize_metric(params, options, group); end
end

# Collects options for metric initializer
#
# source://yabeda//lib/yabeda/dsl/option_builder.rb#6
class Yabeda::DSL::OptionBuilder
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # source://yabeda//lib/yabeda/dsl/option_builder.rb#21
  def method_missing(method_name, method_args, &_block); end

  # @raise [ConfigurationError]
  #
  # source://yabeda//lib/yabeda/dsl/option_builder.rb#12
  def options_from(&block); end

  private

  # @return [Boolean]
  #
  # source://yabeda//lib/yabeda/dsl/option_builder.rb#35
  def kwarg?(method_name); end

  # source://yabeda//lib/yabeda/dsl/option_builder.rb#39
  def option_names; end

  # @return [Boolean]
  #
  # source://yabeda//lib/yabeda/dsl/option_builder.rb#29
  def respond_to_missing?(method_name, _args); end

  # source://yabeda//lib/yabeda/dsl/option_builder.rb#44
  def unknown_options; end
end

# source://yabeda//lib/yabeda.rb#16
Yabeda::EMPTY_TAGS = T.let(T.unsafe(nil), Hash)

# Arbitrary value, can be changed in both sides
#
# source://yabeda//lib/yabeda/gauge.rb#5
class Yabeda::Gauge < ::Yabeda::Metric
  # @overload decrement
  #
  # source://yabeda//lib/yabeda/gauge.rb#28
  def decrement(*args); end

  # @overload increment
  #
  # source://yabeda//lib/yabeda/gauge.rb#19
  def increment(*args); end

  # source://yabeda//lib/yabeda/gauge.rb#6
  def set(tags, value); end
end

# Represents implicit global group
#
# source://yabeda//lib/yabeda/global_group.rb#8
class Yabeda::GlobalGroup < ::Yabeda::Group
  extend ::Forwardable

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_tag(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def default_tags(*args, **_arg1, &block); end
end

# Represents a set of metrics grouped under the same name
#
# source://yabeda//lib/yabeda/group.rb#7
class Yabeda::Group
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # source://yabeda//lib/yabeda/group.rb#22
  def adapter(*adapter_names); end

  # source://yabeda//lib/yabeda/group.rb#17
  def default_tag(key, value); end

  # source://yabeda//lib/yabeda/group.rb#12
  def default_tags; end

  # source://yabeda//lib/yabeda/group.rb#29
  def register_metric(metric); end
end

# Base class for complex metric for measuring time values that allow to
# calculate averages, percentiles, and so on.
#
# source://yabeda//lib/yabeda/histogram.rb#6
class Yabeda::Histogram < ::Yabeda::Metric
  # source://yabeda//lib/yabeda/histogram.rb#10
  def measure(tags = T.unsafe(nil), value = T.unsafe(nil)); end
end

# Base class for all metrics
#
# source://yabeda//lib/yabeda/metric.rb#7
class Yabeda::Metric
  include ::Dry::Initializer::Mixin::Root
  extend ::Dry::Initializer

  # Redefined option reader to get group-level adapter if not set on metric level
  #
  # @api private
  #
  # source://yabeda//lib/yabeda/metric.rb#60
  def adapter; end

  # Returns the metric adapters
  #
  # @return [Hash<Symbol, Yabeda::BaseAdapter>]
  #
  # source://yabeda//lib/yabeda/metric.rb#42
  def adapters; end

  # Returns the value for the given label set
  #
  # source://yabeda//lib/yabeda/metric.rb#22
  def get(labels = T.unsafe(nil)); end

  # source://yabeda//lib/yabeda/metric.rb#36
  def inspect; end

  # Returns allowed tags for metric (with account for global and group-level +default_tags+)
  #
  # @return [Array<Symbol>]
  #
  # source://yabeda//lib/yabeda/metric.rb#32
  def tags; end

  # source://yabeda//lib/yabeda/metric.rb#26
  def values; end
end

# source://yabeda//lib/yabeda/railtie.rb#4
module Yabeda::Rails
  class << self
    # source://yabeda-rails/0.9.0/lib/yabeda/rails.rb#73
    def config; end

    # source://yabeda-rails/0.9.0/lib/yabeda/rails.rb#19
    def controller_handlers; end

    # source://yabeda-rails/0.9.0/lib/yabeda/rails.rb#29
    def install!; end

    # source://yabeda-rails/0.9.0/lib/yabeda/rails.rb#23
    def on_controller_action(&block); end
  end
end

# source://yabeda//lib/yabeda/railtie.rb#5
class Yabeda::Rails::Railtie < ::Rails::Railtie
  # source://yabeda-rails/0.9.0/lib/yabeda/rails/railtie.rb#14
  def puma_server?; end

  # source://yabeda-rails/0.9.0/lib/yabeda/rails/railtie.rb#10
  def rails_server?; end

  # source://yabeda-rails/0.9.0/lib/yabeda/rails/railtie.rb#18
  def unicorn_server?; end
end

# Base class for complex metric for measuring time values that allow to
# calculate averages, percentiles, and so on.
#
# source://yabeda//lib/yabeda/summary.rb#6
class Yabeda::Summary < ::Yabeda::Metric
  # source://yabeda//lib/yabeda/summary.rb#8
  def observe(tags = T.unsafe(nil), value = T.unsafe(nil)); end
end

# Class to merge tags
#
# source://yabeda//lib/yabeda/tags.rb#5
class Yabeda::Tags
  class << self
    # source://yabeda//lib/yabeda/tags.rb#6
    def build(tags, group_name = T.unsafe(nil)); end
  end
end

# source://yabeda//lib/yabeda/version.rb#4
Yabeda::VERSION = T.let(T.unsafe(nil), String)
